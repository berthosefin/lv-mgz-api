// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id
  username        String    @unique
  hashed_password String
  store           Store?
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Session {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
}

model Store {
  id        String    @id
  name      String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  cashDesk  CashDesk?
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id            String        @id
  name          String
  purchasePrice Float
  sellingPrice  Float
  stock         Int
  unit          String
  store         Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id         String          @id
  type       TransactionType
  amount     Float
  label      String
  articles   Article[]
  cashDesk   CashDesk        @relation(fields: [cashDeskId], references: [id], onDelete: Cascade)
  cashDeskId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model CashDesk {
  id            String        @id
  currentAmount Float
  store         Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String        @unique
  Transaction   Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum TransactionType {
  IN
  OUT
}
